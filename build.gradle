import org.gradle.api.JavaVersion

import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'maven'
    id 'application'

    id "org.jetbrains.kotlin.jvm" version '1.7.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.10'

    id 'org.springframework.boot' version '2.5.6'

    id 'com.google.cloud.tools.jib' version '3.2.0'
}

group = 'io.emeraldpay.dshackle.archiver'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://maven.emrld.io" }
    maven { url "https://linkedin.jfrog.io/artifactory/avro-util/" }
}

configurations {
    compile.exclude group: "commons-logging"
    compile.exclude group: "ch.qos.logback"
    compile.exclude group: "org.slf4j", module: "slf4j-jdk14"
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
    compile.exclude group: "org.slf4j", module: "log4j-over-slf4j"

    // should be used only for generation of the stubs, the lib contains grpc classes
    compile.exclude group: "com.salesforce.servicelibs", module: "reactor-grpc"
}


dependencies {
    implementation 'io.emeraldpay.dshackle.archive:dshackle-archive-avro:0.1'

    implementation "io.emeraldpay.etherjar:etherjar-domain:$etherjarVersion"
    implementation "io.emeraldpay.etherjar:etherjar-hex:$etherjarVersion"
    implementation "io.emeraldpay.etherjar:etherjar-rpc-api:$etherjarVersion"
    implementation "io.emeraldpay.etherjar:etherjar-rpc-emerald:$etherjarVersion"
    implementation "io.emeraldpay:emerald-api:0.12-alpha.2"

    implementation "io.grpc:grpc-protobuf:$grpcVersion"
    implementation "io.grpc:grpc-core:$grpcVersion"
    implementation "io.grpc:grpc-netty:$grpcVersion"

    implementation 'io.projectreactor:reactor-core:' + reactorVersion
    implementation 'io.projectreactor.netty:reactor-netty:' + reactorNettyVersion
    implementation 'io.projectreactor:reactor-tools:' + reactorVersion
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation "org.springframework:spring-core:$springVersion"
    implementation("org.springframework.boot:spring-boot-starter:" + springBootVersion) {
        exclude module: 'spring-boot-starter-logging'
    }
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'commons-codec:commons-codec:1.15'

//    implementation 'org.apache.hadoop:hadoop-hdfs-client:' + hadoopVersion
//    implementation 'org.apache.hadoop:hadoop-common:' + hadoopVersion
    implementation 'org.apache.avro:avro:1.11.0'
    implementation 'com.github.luben:zstd-jni:1.5.0-4'
    implementation 'org.xerial.snappy:snappy-java:1.1.8.4'
    //https://linkedin.jfrog.io/artifactory/avro-util/com/linkedin/avroutil1/avro-fastserde/0.2.68
    implementation "com.linkedin.avroutil1:helper-all:0.2.68"
    implementation("com.linkedin.avroutil1:avro-fastserde:0.2.68") {
        exclude group: "com.linkedin.avroutil1", module: "helper"
    }

    implementation 'com.google.cloud:google-cloud-storage:2.4.2'
    implementation 'com.google.cloud:google-cloud-pubsub:1.117.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.slf4j:jul-to-slf4j:$slf4jVersion"
    implementation "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.19.0"

    testImplementation "org.codehaus.groovy:groovy:$groovyVersion"
    testImplementation 'org.spockframework:spock-core:' + spockVersion
    testImplementation 'org.spockframework:spock-spring:' + spockVersion

    testImplementation(platform("org.junit:junit-bom:5.8.2"))
    testImplementation("org.springframework.boot:spring-boot-starter-test:" + springBootVersion){
        exclude module: 'spring-boot-starter-logging'
    }
    testImplementation "org.testcontainers:testcontainers:1.16.3"
    testImplementation "org.testcontainers:gcloud:1.16.3"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '13'
    }
}

test {
    jvmArgs( '-ea', "-Dspring.profiles.active=test", "-Dlogging.level.io.emeraldpay=DEBUG")
    testLogging.showStandardStreams = false
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}

jar {
    enabled = true
}

application {
    getMainClass().set('io.emeraldpay.dshackle.archive.AppKt')
}

jib {
    from {
        image = "openjdk:13"
    }
    to {
        // execute with -Platest=true
        // $ gradle jib -Platest=true

        // by default publish as:
        //  dshackle-archive:shapshot,
        //  dshackle-archive:t<yyyyMMddHHmm>,
        //  dshackle-archive:<versionFull> and
        //  dshackle-archive:<versionMajor.versionMinor>
        //  dshackle-archive:latest only when publishing first version with zero patch (ex. 1.2.0)
        image = [
                project.hasProperty('docker') ? project.property('docker') : 'emeraldpay',
                '/dshackle-archive:',
                'snapshot'
        ].join('')
        tags = [project.version].with(true) {
            add "t" + DateTimeFormatter.ofPattern("yyyyMMddHHmm").withZone(ZoneId.of('UTC')).format(Instant.now())
            add project.version.toString().replaceAll('(\\d+\\.\\d+).+', '$1')
        }
    }
    container {
        jvmFlags = [
                '-Xms512m',
        ]
        mainClass = 'io.emeraldpay.dshackle.archive.AppKt'
        ports = []
    }
}